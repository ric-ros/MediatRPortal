@page "/designer"
@using MediatR
@using MediatRPortal.Client.Components.Base
@using MediatRPortal.Client.Features.Charges.Notifications
@using MediatRPortal.Client.Features.Designer.Commands
@using MediatRPortal.Client.Services

@inject IMediator Mediator
@inject ISnackbar Snackbar

@inherits NotificationComponentBase<INotification>


<PageTitle>Designer</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Designer</MudText>

<MudSwitch @bind-Value="_hasDetails" @bind-Value:after="SetHasDetails" Label="Show details" />

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-3">
            <MudText Typo="Typo.h4" GutterBottom="true">Routes</MudText>
            <MediatRPortal.Client.Components.Batch.Routes />
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="pa-3">
            <MudText Typo="Typo.h4" GutterBottom="true">Charges</MudText>
            <MediatRPortal.Client.Components.Batch.Charges />
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private bool _hasDetails;

    private void SetHasDetails()
    {
        Mediator.Send(new SetCargoDetailsCommand(_hasDetails));
    }

    protected override void RegisterNotificationHandlers()
    {
        base.RegisterNotificationHandlers();

        RegisterNotificationHandler<ChargeUpdatedNotification>(HandleChargeUpdated);
    }

    private void HandleChargeUpdated(ChargeUpdatedNotification notification)
    {
        Snackbar.Add($"Charge {notification.Charge.Description} updated", Severity.Success);
    }
}
