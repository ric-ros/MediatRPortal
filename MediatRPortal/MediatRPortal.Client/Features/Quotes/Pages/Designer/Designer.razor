@page "/designer"
@using MediatR
@using MediatRPortal.Client.Features.Quotes.Pages.Designer.CQRS.Commands
@using MediatRPortal.Client.Features.Quotes.Pages.Designer.Components.Charges.CQRS.Notifications
@using MediatRPortal.Client.Features.Quotes.Pages.Designer.Components.Routes.CQRS.Notifications

@inject IMediator Mediator
@inject ISnackbar Snackbar

@inherits NotificationComponentBase<NotificationBase>


<PageTitle>Designer</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Designer <MudText Typo="Typo.caption">(id: @ComponentId)</MudText></MudText>
<MudText Typo="Typo.h6">@_designer.Routes.Count Routes</MudText>
<MudText Typo="Typo.h6">@_designer.Charges.Count Charges</MudText>

<MudSwitch @bind-Value="_designer.HasCargoDetails" @bind-Value:after="SetHasDetails" Label="Has details" />

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-3">
            <MediatRPortal.Client.Features.Quotes.Pages.Designer.Components.Routes.Routes />
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="pa-3">
            <MediatRPortal.Client.Features.Quotes.Pages.Designer.Components.Charges.Charges />
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private DesignerModel _designer = new();

    private void SetHasDetails()
    {
        Mediator.Send(new SetCargoDetailsCommand(SessionId, _designer.HasCargoDetails));
    }

    #region Notification handlers
    protected override void RegisterNotificationHandlers()
    {
        base.RegisterNotificationHandlers();


        RegisterNotificationHandler<RouteAddedNotification>(HandleRouteAdded);
        RegisterNotificationHandler<RouteUpdatedNotification>(HandleRouteUpdated);
        RegisterNotificationHandler<RouteDeletedNotification>(HandleRouteDeleted);
        RegisterNotificationHandler<RoutesClearedNotification>(HandleRoutesCleared);

        RegisterNotificationHandler<ChargeAddedNotification>(HandleChargeAdded);
        RegisterNotificationHandler<ChargeUpdatedNotification>(HandleChargeUpdated);
        RegisterNotificationHandler<ChargeDeletedNotification>(HandleChargeDeleted);
        RegisterNotificationHandler<ChargesClearedNotification>(HandleChargesCleared);

    }

    private void HandleRouteAdded(RouteAddedNotification notification)
    {
        _designer.Routes.Add(notification.Route);

        // Snackbar.Add($"Route {notification.Route.Origin} - {notification.Route.Destination} added", Severity.Success);

        StateHasChanged();
    }

    private void HandleRouteUpdated(RouteUpdatedNotification notification)
    {
        var routeToUpdate = _designer.Routes.FirstOrDefault(x => x.Id == notification.Route.Id);

        if (routeToUpdate is not null)
        {
            routeToUpdate = notification.Route;
        }
    }

    private void HandleRouteDeleted(RouteDeletedNotification notification)
    {
        _designer.Routes.RemoveAll(x => x.Id == notification.Route.Id);

        StateHasChanged();
    }

    private void HandleRoutesCleared(RoutesClearedNotification notification)
    {
        _designer.Routes.Clear();

        StateHasChanged();
    }

    private void HandleChargeAdded(ChargeAddedNotification notification)
    {
        _designer.Charges.Add(notification.Charge);

        StateHasChanged();
    }

    private void HandleChargeUpdated(ChargeUpdatedNotification notification)
    {
        var chargeToUpdate = _designer.Charges.FirstOrDefault(x => x.Id == notification.Charge.Id);

        if (chargeToUpdate is not null)
        {
            chargeToUpdate.Description = notification.Charge.Description;
        }

        StateHasChanged();
    }

    private void HandleChargeDeleted(ChargeDeletedNotification notification)
    {
        _designer.Charges.RemoveAll(x => x.Id == notification.ChargeId);

        StateHasChanged();
    }

    private void HandleChargesCleared(ChargesClearedNotification notification)
    {
        _designer.Charges.Clear();

        StateHasChanged();
    }
    #endregion
}
