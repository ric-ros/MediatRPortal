@using MediatR
@using MediatRPortal.Client.Features.Charges.Commands

@inject IMediator Mediator

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @Charge.Description
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @foreach (var item in _columns)
            {
                <MudItem>
                    <MudTextField Label="@item.Key" T="decimal?"
                                  Value="item.Value" ValueChanged="value => HandleValueChanged(item.Key, value)" />
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SendModifyCharge">Modify</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public required Route Route { get; set; }
    [Parameter]
    public required Charge Charge { get; set; }

    private Dictionary<string, decimal?> _columns = [];

    protected override void OnInitialized()
    {
        foreach (var item in Charge.Columns)
        {
            _columns.Add(item.Key, item.Value);
        }
    }

    private void HandleValueChanged(string key, decimal? value)
    {
        if (_columns.ContainsKey(key))
        {
            _columns[key] = value;
        }
    }

    private void Cancel() => MudDialog?.Cancel();

    private async Task SendModifyCharge()
    {

        // MudDialog?.Close(DialogResult.Ok(Charge with { Columns = _columns }));
        // Just for tests purposes, we will use mediator to send the notification

        await Mediator.Send(new UpdateChargeCommand(Route.Id, Charge.Id, Charge.Description ?? "", _columns));

        MudDialog?.Close(DialogResult.Ok(Charge with { Columns = _columns }));
    }
}