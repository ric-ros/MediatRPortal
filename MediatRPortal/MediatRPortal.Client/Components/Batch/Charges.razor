@using MediatR
@using MediatRPortal.Client.Features.Charges.Notifications
@using MediatRPortal.Client.Features.Designer.Notifications
@using MediatRPortal.Client.Features.Routes.Notifications
@using MediatRPortal.Client.Services

@inject IJSRuntime JsRuntime
@inject IMediator Mediator

@implements INotificationHandler<HasCargoDetailsSetNotification>
@implements INotificationHandler<RouteAddedNotification>
@implements INotificationHandler<RouteUpdatedNotification>
@implements INotificationHandler<ChargeAddedNotification>
@implements INotificationHandler<ChargeUpdatedNotification>


<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

            .table th:last-child {
                width: 50px;
                text-align: center;
            }

    .column-selector {
        margin-left: 10px;
    }

    .route-row {
        font-weight: bold;
        background-color: #f0f0f0;
    }

    .charge-row {
        cursor: pointer;
    }

        .charge-row:hover {
            background-color: #f0f0f0;
        }
</style>

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Charges</th>
                @foreach (var column in _selectedColumns)
                {
                    <th>@column</th>
                }
                <th>
                    @if (!_hasCargoDetails)
                    {
                        <select class="column-selector" multiple @onchange="HandleColumnSelection">
                            @foreach (var column in _allColumns)
                            {
                                <option value="@column" selected="@_selectedColumns.Contains(column)">
                                    @column
                                </option>
                            }
                        </select>
                    }
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in _routes)
            {
                <tr class="route-row">
                    <td colspan="@(_selectedColumns.Count + 2)">@route.Origin -> @route.Destination</td>
                </tr>
                @foreach (var charge in _chargesByRoute[GetRouteKey(route)])
                {
                    <tr @onclick="() => HandleRowClick(charge, route)" class="charge-row">
                        <td>@charge.Description</td>
                        @foreach (var column in _selectedColumns)
                        {
                            <td>@(GetChargeValue(charge, column))</td>
                        }
                        <td>
                            <button>x</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Route> _routes = new();
    private Dictionary<string, List<Charge>> _chargesByRoute = new();
    private bool _hasCargoDetails;
    private List<string> _allColumns = new List<string>
    {
        "Base", "20'", "40'", "40HC", "Column 1", "Column 2", "Column 3", "Column 4",
        "Column 5", "Column 6", "Column 7", "Column 8", "Column 9", "Column 10"
    };

    private List<string> _selectedColumns = ["Base", "20'", "40'", "40HC"];

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    // protected override void OnParametersSet()
    // {
    //     base.OnParametersSet();

    //     _chargesByRoute = _routes.ToDictionary(GetRouteKey, route => new List<Charge>
    //     {
    //         new() {
    //             AssociatedRouteId = route.Id,
    //             Description = "Ocean Freight",
    //             Columns = new Dictionary<string, decimal?> { { "Base", 1000 }, { "20'", 2000 }, { "40'", 3000 }, { "40HC", 4000 } } },
    //         new() {
    //             AssociatedRouteId = route.Id,
    //             Description = "Documentation",
    //             Columns = new Dictionary<string, decimal?> { { "Base", 100 }, { "20'", 200 }, { "40'", 300 }, { "40HC", 400 } } },
    //         new() {
    //             AssociatedRouteId = route.Id,
    //             Description = "Customs Clearance",
    //             Columns = new Dictionary<string, decimal?> { { "Base", 50 }, { "20'", 100 }, { "40'", 150 }, { "40HC", 200 } } }
    //     });

    // }

    public async Task Handle(HasCargoDetailsSetNotification notification, CancellationToken cancellationToken)
    {
        _hasCargoDetails = notification.HasDetails;

        await InvokeAsync(StateHasChanged);
    }

    public async Task Handle(RouteAddedNotification notification, CancellationToken cancellationToken)
    {
        _routes.Add(notification.Route);

        await InvokeAsync(StateHasChanged);
    }

    public Task Handle(RouteUpdatedNotification notification, CancellationToken cancellationToken)
    {
        var route = _routes.FirstOrDefault(r => r.Id == notification.Route.Id);

        if (route is not null)
        {
            route.Origin = notification.Route.Origin;
            route.Destination = notification.Route.Destination;
            route.Currency = notification.Route.Currency;
        }

        return Task.CompletedTask;
    }

    public async Task Handle(ChargeAddedNotification notification, CancellationToken cancellationToken)
    {
        if (_chargesByRoute.TryGetValue(GetRouteKey(_routes.FirstOrDefault(r => r.Id == notification.Charge.AssociatedRouteId)), out var charges))
        {
            charges.Add(notification.Charge);
        }

        await InvokeAsync(StateHasChanged);
    }

    public async Task Handle(ChargeUpdatedNotification notification, CancellationToken cancellationToken)
    {
        if (_chargesByRoute.TryGetValue(GetRouteKey(_routes.FirstOrDefault(r => r.Id == notification.Charge.AssociatedRouteId)), out var charges))
        {
            var charge = charges.FirstOrDefault(c => c.Id == notification.Charge.Id);

            if (charge is not null)
            {
                charge.Description = notification.Charge.Description;
                charge.Columns = notification.Charge.Columns;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private string GetRouteKey(Route? route) => route is null ? "" : $"{route.Origin}-{route.Destination}-{route.Currency}";

    private void HandleColumnSelection(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;

        if (selectedOptions is not null)
        {
            _selectedColumns = [.. selectedOptions];
        }
    }

    private void HandleRowClick(Charge charge, Route route)
    {
        // open dialog to change charge values

        // update charge values

        // show alert in the meantime

        JsRuntime.InvokeVoidAsync("alert", $"Charge {charge.Description} of route {GetRouteKey(route)} clicked");
    }

    private string GetChargeValue(Charge charge, string columnName)
    {
        return charge.Columns.TryGetValue(columnName, out var value)
            ? value?.ToString() ?? string.Empty
            : string.Empty;
    }
}