@using MediatR
@using MediatRPortal.Client.Components.Base
@using MediatRPortal.Client.Features.Charges.CommandsHandlers
@using MediatRPortal.Client.Features.Charges.Notifications
@using MediatRPortal.Client.Features.Designer.Notifications
@using MediatRPortal.Client.Features.Routes.Notifications
@using MediatRPortal.Client.Services

@inject IJSRuntime JsRuntime
@inject IMediator Mediator
@inject IDialogService DialogService

@inherits NotificationComponentBase<INotification>

<MudText Typo="Typo.h4" GutterBottom="true">Charges <MudText Typo="Typo.caption">(id: @componentId)</MudText></MudText>

<style>
    .route-row {
        background-color: var(--mud-palette-dark-lighten);
        color: var(--mud-palette-primary-text) !important;
    }

        .route-row:hover {
            background-color: var(--mud-palette-dark-hover) !important;
        }

    .charge-row {
        cursor: pointer;
    }
</style>

<MudSimpleTable Hover Dense>
    <thead>
        <tr>
            <th>Charges</th>
            @foreach (var column in _selectedColumns)
            {
                <th>@column</th>
            }
            <th>
                @if (!_hasCargoDetails)
                {
                    <MudSelect MultiSelection Margin="Margin.Dense" Variant="Variant.Outlined"
                               @bind-SelectedValues="_selectedColumns" @bind-SelectedValues:after="HandleSelectedColumnChanged">
                        @foreach (var column in _allColumns)
                        {
                            <MudSelectItem Value="@column" Selected="@_selectedColumns.Contains(column)">
                                @column
                            </MudSelectItem>
                        }
                    </MudSelect>
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var route in _routes)
        {
            <tr class="route-row">
                <td colspan="@(_selectedColumns.Count() + 1)">@route.Origin -> @route.Destination</td>
                <td>
                    <MudSelect @bind-Value="_selectedChargeDescription"
                               @bind-Value:after="() => AddCharge(route.Id)"
                               Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Add"
                               Margin="Margin.Dense" Variant="Variant.Outlined" Label="Add Charge">
                        @foreach (var description in _allChargeDescriptions.Where(d => !_chargesByRoute[route.Id].Any(c => c.Description == d)))
                        {
                            <MudSelectItem Value="@description">@description</MudSelectItem>
                        }
                    </MudSelect>
                </td>
            </tr>
            @foreach (var charge in _chargesByRoute[route.Id])
            {
                <tr @onclick="() => HandleRowClick(charge, route)" class="charge-row">
                    <td>@charge.Description</td>
                    @foreach (var column in _selectedColumns)
                    {
                        <td>@(GetChargeValue(charge, column))</td>
                    }
                    <td>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       OnClick="() => DeleteCharge(route.Id, charge.Id)" />
                    </td>
                </tr>
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    [Parameter]
    public List<ChargeModel>? InitialCharges { get; set; }

    [Parameter, Obsolete("We should retrieve routes from the charges' AssociatedRouteId")]
    public List<RouteModel>? InitialRoutes { get; set; }

    private List<RouteModel> _routes = new();
    private Dictionary<Guid, List<ChargeModel>> _chargesByRoute = new();
    private bool _hasCargoDetails;

    private IEnumerable<string> _selectedColumns = ["Base", "20'", "40'", "40HC"];
    private List<string> _allColumns = new List<string>
    {
        "Base", "20'", "40'", "40HC", "Column 1", "Column 2", "Column 3", "Column 4",
        "Column 5", "Column 6", "Column 7", "Column 8", "Column 9", "Column 10"
    };

    private string? _selectedChargeDescription;
    private List<string> _allChargeDescriptions = new List<string>
    {
        "Ocean Freight", "Documentation", "Customs Clearance", "Insurance", "Handling",
        "Port Charges", "Fuel Surcharge", "Security Surcharge", "Terminal Handling",
        "Container Cleaning", "Container Inspection", "Container Repair", "Container Storage"
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (InitialRoutes is not null)
        {
            _routes = [.. InitialRoutes];
        }

        if (InitialCharges is not null)
        {
            foreach (var charge in InitialCharges)
            {
                if (_chargesByRoute.TryGetValue(charge.AssociatedRouteId, out var charges))
                {
                    charges.Add(charge);
                }
                else
                {
                    _chargesByRoute.Add(charge.AssociatedRouteId, [charge]);
                }
            }
        }
    }

    #region MediatR Notifications
    protected override void RegisterNotificationHandlers()
    {
        base.RegisterNotificationHandlers();

        RegisterNotificationHandler<HasCargoDetailsSetNotification>(HandleCargoDetailsSet);

        RegisterNotificationHandler<RouteAddedNotification>(HandleRouteAdded);
        RegisterNotificationHandler<RouteDeletedNotification>(HandleRouteDeleted);
        RegisterNotificationHandler<RouteUpdatedNotification>(HandleRouteUpdated);
        RegisterNotificationHandler<RoutesClearedNotification>(HandleRoutesCleared);

        RegisterNotificationHandler<ChargeAddedNotification>(HandleChargeAdded);
        RegisterNotificationHandler<ChargeUpdatedNotification>(HandleChargeUpdated);
    }

    public void HandleCargoDetailsSet(HasCargoDetailsSetNotification notification)
    {
        _hasCargoDetails = notification.HasDetails;

        StateHasChanged();
    }

    private void HandleRouteAdded(RouteAddedNotification notification)
    {
        _routes.Add(notification.Route);

        var charges = MockChargeData(notification.Route.Id);

        // notify the charges were added
        foreach (var charge in charges)
        {
            Mediator.Publish(new ChargeAddedNotification(charge));
        }

        StateHasChanged();
    }

    public void HandleRouteUpdated(RouteUpdatedNotification notification)
    {
        var route = _routes.FirstOrDefault(r => r.Id == notification.Route.Id);

        if (route is not null)
        {
            var charges = _chargesByRoute[route.Id];

            route.Origin = notification.Route.Origin;
            route.Destination = notification.Route.Destination;
            route.Currency = notification.Route.Currency;

            charges.ForEach(c => c.AssociatedRouteId = route.Id);

        }

        StateHasChanged();
    }

    public async void HandleRouteDeleted(RouteDeletedNotification notification)
    {
        var route = _routes.FirstOrDefault(r => r.Id == notification.Route.Id);
        if (route is not null)
        {
            // delete all charges associated with the route and remove the route

            foreach (var charge in _chargesByRoute[route.Id])
            {
                await Mediator.Send(new DeleteChargeCommand(charge.Id));
            }

            _routes.Remove(route);
            _chargesByRoute.Remove(route.Id);
        }
        StateHasChanged();
    }

    public void HandleRoutesCleared(RoutesClearedNotification notification)
    {
        _routes.Clear();
        _chargesByRoute.Clear();

        Mediator.Publish(new ChargesClearedNotification());

        StateHasChanged();
    }

    public void HandleChargeAdded(ChargeAddedNotification notification)
    {
        if (_chargesByRoute.TryGetValue(notification.Charge.AssociatedRouteId, out var charges))
        {
            charges.Add(notification.Charge);
        }
        else
        {
            _chargesByRoute.Add(notification.Charge.AssociatedRouteId, [notification.Charge]);
        }

        StateHasChanged();
    }

    public void HandleChargeUpdated(ChargeUpdatedNotification notification)
    {
        if (_chargesByRoute.TryGetValue(notification.Charge.AssociatedRouteId, out var charges))
        {
            var charge = charges.FirstOrDefault(c => c.Id == notification.Charge.Id);

            if (charge is not null)
            {
                charge.Description = notification.Charge.Description;
                charge.Columns = notification.Charge.Columns;
            }
        }

        StateHasChanged();
    }
    #endregion

    public void HandleSelectedColumnChanged()
    {
        foreach (var route in _routes)
        {
            var routeKey = GetRouteKey(route);
            if (_chargesByRoute.TryGetValue(route.Id, out var charges))
            {
                _chargesByRoute[route.Id] = charges.Select(c =>
                {
                    var newCharge = c with { }; // clone the charge

                    // remove any columns that are not in the selected columns
                    foreach (var column in c.Columns.Keys)
                    {
                        if (!_selectedColumns.Contains(column))
                        {
                            newCharge.Columns.Remove(column);
                        }
                    }

                    // add any columns that are in the selected columns but not in the charge
                    foreach (var column in _selectedColumns)
                    {
                        if (!newCharge.Columns.ContainsKey(column))
                        {
                            newCharge.Columns.Add(column, null);
                        }
                    }

                    return newCharge;
                }).ToList();
            }
        }

        StateHasChanged();
    }

    private async Task AddCharge(Guid routeId)
    {
        var route = _routes.FirstOrDefault(r => r.Id == routeId);
        if (route is not null)
        {
            var chargeId = await Mediator.Send(new AddChargeCommand(route.Id, _selectedChargeDescription, _selectedColumns.ToDictionary(c => c, c => (decimal?)null)));

            _chargesByRoute[routeId].Add(new ChargeModel
                {
                    Id = chargeId,
                    AssociatedRouteId = routeId,
                    Description = _selectedChargeDescription,
                    Columns = _selectedColumns.ToDictionary(c => c, c => (decimal?)null)
                });

            _selectedChargeDescription = null;

            // var parameters = new DialogParameters<ChargeDialog> { { x => x.Charge, charge }, { x => x.Route, route } };

            // _ = await DialogService.ShowAsync<ChargeDialog>("Charge", parameters);
        }
    }

    private async Task DeleteCharge(Guid routeId, Guid chargeId)
    {
        var route = _routes.FirstOrDefault(r => r.Id == routeId);
        if (route is not null)
        {
            var charge = _chargesByRoute[routeId].FirstOrDefault(c => c.Id == chargeId);
            if (charge is not null)
            {
                var result = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this charge?");

                if (result)
                {
                    _chargesByRoute[routeId].Remove(charge);
                    await Mediator.Send(new DeleteChargeCommand(chargeId));

                    StateHasChanged();
                }
            }
        }
    }

    private string GetRouteKey(RouteModel? route) => route is null ? "" : $"{route.Origin}-{route.Destination}-{route.Currency}";

    private async Task HandleRowClick(ChargeModel charge, RouteModel route)
    {
        // open dialog to change charge values
        var parameters = new DialogParameters<ChargeDialog> { { x => x.Charge, charge }, { x => x.Route, route } };

        _ = await DialogService.ShowAsync<ChargeDialog>("Charge", parameters);
        // var result = await dialog.Result;

        // if (result?.Data is Charge modifiedCharge)
        // {
        //     // here we would do the normal update logic but we will handle it with mediator inside the dialog
        // }
    }

    private string GetChargeValue(ChargeModel charge, string columnName)
    {
        return charge.Columns.TryGetValue(columnName, out var value)
            ? value?.ToString() ?? string.Empty
            : string.Empty;
    }

    internal static List<ChargeModel> MockChargeData(Guid routeId)
    {
        List<ChargeModel> charges = new List<ChargeModel>
        {
            new()
            {
                AssociatedRouteId = routeId,
                Description = "Ocean Freight",
                Columns = new Dictionary<string, decimal?> { { "Base", 1000 }, { "20'", 2000 }, { "40'", 3000 }, { "40HC", 4000 } }
            },
            new()
            {
                AssociatedRouteId = routeId,
                Description = "Documentation",
                Columns = new Dictionary<string, decimal?> { { "Base", 100 }, { "20'", 200 }, { "40'", 300 }, { "40HC", 400 } }
            },
            new()
            {
                AssociatedRouteId = routeId,
                Description = "Customs Clearance",
                Columns = new Dictionary<string, decimal?> { { "Base", 50 }, { "20'", 100 }, { "40'", 150 }, { "40HC", 200 } }
            }
        };

        return charges;
    }
}