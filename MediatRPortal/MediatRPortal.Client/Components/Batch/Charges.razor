@using MediatR
@using MediatRPortal.Client.Components.Base
@using MediatRPortal.Client.Features.Charges.Notifications
@using MediatRPortal.Client.Features.Designer.Notifications
@using MediatRPortal.Client.Features.Routes.Notifications
@using MediatRPortal.Client.Services

@inject IJSRuntime JsRuntime
@inject IMediator Mediator
@inject IDialogService DialogService

@inherits NotificationComponentBase<INotification>


<style>
    .route-row {
        background-color: var(--mud-palette-primary-lighten);
        color: var(--mud-palette-primary-text) !important;
    }

        .route-row:hover {
            background-color: var(--mud-palette-primary) !important;
        }


    .charge-row {
        cursor: pointer;
    }
</style>

<div>
    <p>
        @_tempId
    </p>
    <MudSimpleTable Hover Dense>
        <thead>
            <tr>
                <th>Charges</th>
                @foreach (var column in _selectedColumns)
                {
                    <th>@column</th>
                }
                <th>
                    @if (!_hasCargoDetails)
                    {
                        <MudSelect MultiSelection @bind-SelectedValues="_selectedColumns">
                            @foreach (var column in _allColumns)
                            {
                                <MudSelectItem Value="@column" Selected="@_selectedColumns.Contains(column)">
                                    @column
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in _routes)
            {
                <tr class="route-row">
                    <td colspan="@(_selectedColumns.Count() + 2)">@route.Origin -> @route.Destination</td>
                </tr>
                @foreach (var charge in _chargesByRoute[route.Id])
                {
                    <tr @onclick="() => HandleRowClick(charge, route)" class="charge-row">
                        <td>@charge.Description</td>
                        @foreach (var column in _selectedColumns)
                        {
                            <td>@(GetChargeValue(charge, column))</td>
                        }
                        <td>
                            <button>x</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </MudSimpleTable>
</div>

@code {
    private Guid _tempId = Guid.NewGuid();

    private List<Route> _routes = new();
    private Dictionary<Guid, List<Charge>> _chargesByRoute = new();
    private bool _hasCargoDetails;
    private List<string> _allColumns = new List<string>
    {
        "Base", "20'", "40'", "40HC", "Column 1", "Column 2", "Column 3", "Column 4",
        "Column 5", "Column 6", "Column 7", "Column 8", "Column 9", "Column 10"
    };

    private IEnumerable<string> _selectedColumns = ["Base", "20'", "40'", "40HC"];

    protected override void RegisterNotificationHandlers()
    {
        base.RegisterNotificationHandlers();

        RegisterNotificationHandler<HasCargoDetailsSetNotification>(HandleCargoDetailsSet);
        RegisterNotificationHandler<RouteAddedNotification>(HandleRouteAdded);
        RegisterNotificationHandler<RouteDeletedNotification>(HandleRouteDeleted);
        RegisterNotificationHandler<RouteUpdatedNotification>(HandleRouteUpdated);
        RegisterNotificationHandler<RoutesClearedNotification>(HandleRoutesCleared);
        RegisterNotificationHandler<ChargeAddedNotification>(HandleChargeAdded);
        RegisterNotificationHandler<ChargeUpdatedNotification>(HandleChargeUpdated);
    }

    public void HandleCargoDetailsSet(HasCargoDetailsSetNotification notification)
    {
        _hasCargoDetails = notification.HasDetails;

        StateHasChanged();
    }


    private void HandleRouteAdded(RouteAddedNotification notification)
    {
        var a = _tempId;

        _routes.Add(notification.Route);
        _chargesByRoute.Add(notification.Route.Id, MockChargeData(notification.Route));

        StateHasChanged();
    }

    public void HandleRouteUpdated(RouteUpdatedNotification notification)
    {
        var route = _routes.FirstOrDefault(r => r.Id == notification.Route.Id);

        if (route is not null)
        {
            var charges = _chargesByRoute[route.Id];

            route.Origin = notification.Route.Origin;
            route.Destination = notification.Route.Destination;
            route.Currency = notification.Route.Currency;

            charges.ForEach(c => c.AssociatedRouteId = route.Id);

        }

        StateHasChanged();
    }

    public void HandleRouteDeleted(RouteDeletedNotification notification)
    {
        var route = _routes.FirstOrDefault(r => r.Id == notification.Route.Id);
        if (route is not null)
        {
            _routes.Remove(route);
            _chargesByRoute.Remove(route.Id);
        }
        StateHasChanged();
    }

    public void HandleRoutesCleared(RoutesClearedNotification notification)
    {
        _routes.Clear();
        _chargesByRoute.Clear();

        StateHasChanged();
    }

    public void HandleChargeAdded(ChargeAddedNotification notification)
    {
        if (_chargesByRoute.TryGetValue(notification.Charge.AssociatedRouteId, out var charges))
        {
            charges.Add(notification.Charge);
        }

        StateHasChanged();
    }

    public void HandleChargeUpdated(ChargeUpdatedNotification notification)
    {
        if (_chargesByRoute.TryGetValue(notification.Charge.AssociatedRouteId, out var charges))
        {
            var charge = charges.FirstOrDefault(c => c.Id == notification.Charge.Id);

            if (charge is not null)
            {
                charge.Description = notification.Charge.Description;
                charge.Columns = notification.Charge.Columns;
            }
        }

        StateHasChanged();
    }

    private string GetRouteKey(Route? route) => route is null ? "" : $"{route.Origin}-{route.Destination}-{route.Currency}";

    private void HandleColumnSelection()
    {

    }

    private async Task HandleRowClick(Charge charge, Route route)
    {
        // open dialog to change charge values
        var parameters = new DialogParameters<ChargeDialog> { { x => x.Charge, charge },{ x => x.Route, route} };

        _ = await DialogService.ShowAsync<ChargeDialog>("Charge", parameters);
        // var result = await dialog.Result;

        // if (result?.Data is Charge modifiedCharge)
        // {
        //     // here we would do the normal update logic but we will handle it with mediator inside the dialog
        // }
    }

    private string GetChargeValue(Charge charge, string columnName)
    {
        return charge.Columns.TryGetValue(columnName, out var value)
            ? value?.ToString() ?? string.Empty
            : string.Empty;
    }

    private static List<Charge> MockChargeData(Route route)
    {
        return new List<Charge>
        {
            new()
            {
                AssociatedRouteId = route.Id,
                Description = "Ocean Freight",
                Columns = new Dictionary<string, decimal?> { { "Base", 1000 }, { "20'", 2000 }, { "40'", 3000 }, { "40HC", 4000 } }
            },
            new()
            {
                AssociatedRouteId = route.Id,
                Description = "Documentation",
                Columns = new Dictionary<string, decimal?> { { "Base", 100 }, { "20'", 200 }, { "40'", 300 }, { "40HC", 400 } }
            },
            new()
            {
                AssociatedRouteId = route.Id,
                Description = "Customs Clearance",
                Columns = new Dictionary<string, decimal?> { { "Base", 50 }, { "20'", 100 }, { "40'", 150 }, { "40HC", 200 } }
            }
        };
    }
}