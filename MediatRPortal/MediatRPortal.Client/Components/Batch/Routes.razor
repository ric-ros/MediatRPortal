@using MediatR
@using MediatRPortal.Client.Components.Base
@using MediatRPortal.Client.Features.Designer.Notifications
@using MediatRPortal.Client.Features.Routes.Commands

@inject IMediator Mediator
@inherits NotificationComponentBase<INotification>


<div class="d-flex justify-space-around align-center">
    <MudIcon Icon="@(_hasDetails ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)" /> Has details

    <MudSpacer />

    <MudTextField @bind-Value="_routesCount" Label="Generate routes" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateRoutes">Generate</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearRoutes">Clear</MudButton>
</div>

<MudSimpleTable Hover Dense>
    <thead>
        <tr>
            <th>Origin</th>
            <th>Destination</th>
            <th>Currency</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var route in _routes)
        {
            <tr>
                <td><MudTextField @bind-Value="route.Origin" @bind-Value:after="() => UpdateRoute(route)" /></td>
                <td><MudTextField @bind-Value="route.Destination" @bind-Value:after="() => UpdateRoute(route)" /></td>
                <td><MudTextField @bind-Value="route.Currency" @bind-Value:after="() => UpdateRoute(route)" /></td>
                <td>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => RemoveRoute(route))">Delete</MudButton>
                </td>
            </tr>
        }
        <tr>
            <td><MudTextField @bind-Value="_newRoute.Origin" Label="Origin" /></td>
            <td><MudTextField @bind-Value="_newRoute.Destination" Label="Destination" /></td>
            <td><MudTextField @bind-Value="_newRoute.Currency" Label="Currency" /></td>
            <td>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddRoute">Add</MudButton>
            </td>
        </tr>
    </tbody>
</MudSimpleTable>


@code {
    private List<Route> _routes = [];

    private Route _newRoute = new();
    private int _routesCount = 1;
    private bool _hasDetails;

    protected override void RegisterNotificationHandlers()
    {
        base.RegisterNotificationHandlers();

        RegisterNotificationHandler<HasCargoDetailsSetNotification>(HandleCargoDetailsSet);
    }

    public void HandleCargoDetailsSet(HasCargoDetailsSetNotification notification)
    {
        _hasDetails = notification.HasDetails;

        StateHasChanged();
    }

    private async Task AddRoute()
    {
        if (string.IsNullOrWhiteSpace(_newRoute.Origin) || string.IsNullOrWhiteSpace(_newRoute.Destination) || string.IsNullOrWhiteSpace(_newRoute.Currency))
        {
            return;
        }

        var routeId = await Mediator.Send(new AddRouteCommand(_newRoute.Origin, _newRoute.Destination, _newRoute.Currency));

        _routes.Add(_newRoute with { Id = routeId });

        _newRoute = new();
    }

    private async Task GenerateRoutes()
    {
        var actualRoutesCount = _routes.Count + 1;
        for (int i = actualRoutesCount; i < _routesCount + actualRoutesCount; i++)
        {
            var routeToAdd = new Route
                {
                    Origin = $"Origin {i}",
                    Destination = $"Destination {i}",
                    Currency = "AUD"
                };

            var routeId = await Mediator.Send(new AddRouteCommand(routeToAdd.Origin, routeToAdd.Destination, routeToAdd.Currency));

            _routes.Add(routeToAdd with { Id = routeId });
        }
    }

    private async Task UpdateRoute(Route route)
    {
        await Mediator.Send(new UpdateRouteCommand(route.Id, route.Origin ?? "", route.Destination ?? "", route.Currency ?? ""));
    }

    private async Task RemoveRoute(Route route)
    {
        await Mediator.Send(new DeleteRouteCommand(route.Id));

        _routes.Remove(route);
    }

    private async Task ClearRoutes()
    {
        await Mediator.Send(new ClearRoutesCommand());

        _routes.Clear();
    }
}